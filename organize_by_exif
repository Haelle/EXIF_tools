#!/bin/bash

# Fonction pour afficher l'aide
display_help() {
  echo "Usage: $0 source=<source_path> destination=<destination_path> [--dry-run] [--clear-cache]"
  echo
  echo "Options:"
  echo "  source=<source_path>        Spécifie le chemin du dossier source contenant les fichiers."
  echo "  destination=<destination_path>   Spécifie le chemin du dossier de destination pour organiser les fichiers."
  echo "  --dry-run                   Affiche les chemins cibles sans copier les fichiers."
  echo "  --clear-cache               Vide le cache de MapQuest en supprimant ~/.config/EXIF_tools/map_quest_cache.json."
  echo "  --help                      Affiche cette aide."
  exit 0
}

# Variables de chemins de fichiers
CONFIG_FILE="$HOME/.config/EXIF_tools/config.ini"
CACHE_FILE="$HOME/.config/EXIF_tools/map_quest_cache.json"

# Lire les options de la ligne de commande
for arg in "$@"; do
  case $arg in
    source=*)
      SOURCE_DIR="${arg#*=}"
      SOURCE_DIR="${SOURCE_DIR/#\~/$HOME}"  # Expansion de ~ vers le répertoire HOME
      shift
      ;;
    destination=*)
      TARGET_BASE_DIR="${arg#*=}"
      TARGET_BASE_DIR="${TARGET_BASE_DIR/#\~/$HOME}"  # Expansion de ~ vers le répertoire HOME
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    --clear-cache)
      rm -f "$CACHE_FILE"
      echo "Cache de MapQuest supprimé."
      exit 0
      ;;
    --help)
      display_help
      ;;
    *)
      echo "Option inconnue : $arg"
      exit 1
      ;;
  esac
done

# Vérifier que les dossiers source et destination sont définis
if [ -z "$SOURCE_DIR" ] || [ -z "$TARGET_BASE_DIR" ]; then
  echo "Erreur : vous devez spécifier les dossiers source et destination."
  display_help
fi

# Lire le fichier de configuration
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Erreur : fichier de configuration $CONFIG_FILE introuvable."
  exit 1
fi

# Extraire les valeurs de configuration
MAPQUEST_API_KEY=$(awk -F "=" '/^key/ {print $2}' "$CONFIG_FILE" | xargs)
PREFER_ENGLISH_NAMES=$(awk -F "=" '/^prefer_english_names/ {print $2}' "$CONFIG_FILE" | xargs)
LOCATION_FORMAT=$(awk -F "=" '/^location/ {print $2}' "$CONFIG_FILE" | xargs)
DATE_FORMAT=$(awk -F "=" '/^date/ {print $2}' "$CONFIG_FILE" | xargs)

# Vérifier si la clé API a été chargée
if [ -z "$MAPQUEST_API_KEY" ]; then
  echo "Erreur : la clé API de MapQuest n'est pas définie dans $CONFIG_FILE."
  exit 1
fi

# Créer le dossier cible si nécessaire
mkdir -p "$TARGET_BASE_DIR"

load_cache() {
  # Charger le cache, ou initialiser s'il n'existe pas
  mkdir -p "$(dirname "$CACHE_FILE")"
  if [ -f "$CACHE_FILE" ]; then
    CACHE=$(<"$CACHE_FILE")
  else
    CACHE="{}"
  fi
}

# Fonction pour mettre à jour le cache sur le disque
update_cache() {
  CACHE=$(echo "$CACHE" | jq --arg key "$1" --arg value "$2" '. + {($key): $value}')
  echo "$CACHE" > "$CACHE_FILE"
}

# Fonction de conversion pour les coordonnées GPS en format décimal
convert_to_decimal() {
  local dms="$1"
  local degrees minutes seconds direction
  degrees=$(echo "$dms" | sed 's/ deg.*//')
  minutes=$(echo "$dms" | sed 's/.*deg \(.*\)'\'' .*/\1/')
  seconds=$(echo "$dms" | sed 's/.*'\'' \(.*\)".*/\1/')
  direction=$(echo "$dms" | sed 's/.*" \(.*\)/\1/')

  # Convertir en format décimal avec 3 chiffres après la virugle (pour réduire l'efficacité du cache ~1km)
  decimal=$(echo "scale=3; $degrees + ($minutes / 60) + ($seconds / 3600)" | bc -l)

  # Si la direction est Sud ou Ouest, rendre la valeur négative
  if [[ "$direction" == "S" || "$direction" == "W" ]]; then
    decimal=$(echo "-$decimal" | bc -l)
  fi

  echo "$decimal"
}

# Fonction pour obtenir la localisation via MapQuest API (avec cache)
get_location_from_mapquest() {
  LAT=$1
  LON=$2
  load_cache

  # Vérifier si les coordonnées existent dans le cache
  COORD_KEY="${LAT},${LON}"
  LOCATION=$(echo "$CACHE" | jq -r --arg key "$COORD_KEY" '.[$key]')

  if [ -n "$LOCATION" ] && [ "$LOCATION" != "null" ]; then
    echo "$LOCATION"
    return
  fi

  # Appeler l'API de MapQuest si le résultat n'est pas en cache
  LANGUAGE="fr"
  if [ "$PREFER_ENGLISH_NAMES" = "True" ]; then
    LANGUAGE="en"
  fi

  COMMAND="https://www.mapquestapi.com/geocoding/v1/reverse?key=$MAPQUEST_API_KEY&location=$LAT,$LON&outFormat=json&locale=$LANGUAGE"
  LOCATION=$(curl -s $COMMAND | jq -r '.results[0].locations[0]')

  TOWN=$(echo "$LOCATION" | jq -r '.adminArea5 // ""')
  CITY=$(echo "$LOCATION" | jq -r '.adminArea4 // ""')
  STATE=$(echo "$LOCATION" | jq -r '.adminArea3 // ""')

  FORMATTED_LOCATION="$LOCATION_FORMAT"
  FORMATTED_LOCATION="${FORMATTED_LOCATION//%town/$TOWN}"
  FORMATTED_LOCATION="${FORMATTED_LOCATION//%city/$CITY}"
  FORMATTED_LOCATION="${FORMATTED_LOCATION//%state/$STATE}"
  FORMATTED_LOCATION="${FORMATTED_LOCATION:-UNKNOWN-LOCATION}"

  # Ajouter au cache
  update_cache "$COORD_KEY" "$FORMATTED_LOCATION"

  echo "$FORMATTED_LOCATION"
}

# Parcourir tous les fichiers du dossier source
find "$SOURCE_DIR" -type f | while read -r FILE; do
  # Extraire les données EXIF (date et album ou localisation) en utilisant -s3
  DATE=$(exiftool -d "%Y-%m-%d" -DateTimeOriginal -s3 "$FILE")
  DATE="${DATE:-UNKNOWN-DATE}"

  # Transformer les noms de mois en anglais avec une majuscule
  DATE=$(LC_ALL=en_EN date -d "$DATE" +"%Y-%m-%B" 2>/dev/null || echo "UNKNOWN-DATE")

  ALBUM=$(exiftool -Album -s3 "$FILE")

  LATITUDE=$(exiftool -GPSLatitude -s3 "$FILE")
  LONGITUDE=$(exiftool -GPSLongitude -s3 "$FILE")

  if [ -n "$ALBUM" ]; then
    LOCATION="$ALBUM"
  elif [ -n "$LATITUDE" ] && [ -n "$LONGITUDE" ]; then
    DECIMAL_LATITUDE=$(convert_to_decimal "$LATITUDE")
    DECIMAL_LONGITUDE=$(convert_to_decimal "$LONGITUDE")
    LOCATION=$(get_location_from_mapquest "$DECIMAL_LATITUDE" "$DECIMAL_LONGITUDE")
  else
    LOCATION="UNKNOWN-LOCATION"
  fi

  SUBFOLDER="$LOCATION"
  DEST_DIR="$TARGET_BASE_DIR/$DATE/$SUBFOLDER"
  FINAL_DEST="$DEST_DIR/$(basename "$FILE")"
  FINAL_DEST_SHORT="$DATE/$SUBFOLDER/$(basename "$FILE")"

  if [ "$DRY_RUN" = true ]; then
    echo -e "\e[34mDry run\e[0m: $(basename "$FILE") serait copié vers \e[32m$FINAL_DEST_SHORT\e[0m"
  else
    mkdir -p "$DEST_DIR"
    echo -e "Copie de $(basename "$FILE") vers \e[32m$FINAL_DEST_SHORT\e[0m"
    cp "$FILE" "$FINAL_DEST"
  fi
done

file_count_source=$(find "$SOURCE_DIR" -type f | wc -l)
file_count_target=$(find "$TARGET_BASE_DIR" -type f | wc -l)
echo "Réorganisation terminée ($file_count_source->$file_count_target fichiers)."
